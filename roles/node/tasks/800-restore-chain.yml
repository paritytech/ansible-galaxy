---

- name: Restore {{ item.part }} | Check if chain folder already exists
  ansible.builtin.stat:
    path: "{{ item.chain_path }}"
    get_checksum: false
  register: _node_data_chain_path_stat

- name: Restore {{ item.part }} | Check if db folder already exists
  ansible.builtin.stat:
    path: "{{ item.chain_path }}/{{ item.db_folder }}"
    get_checksum: false
  register: _node_data_chain_path_db_stat

- name: Restore {{ item.part }} | Get size of db folder
  ansible.builtin.shell: du -cd 1 {{ item.chain_path }}/{{ item.db_folder }} | head -1 | awk '{print $1}'
  check_mode: false
  changed_when: false
  register: _node_data_chain_path_db_size

- name: Restore {{ item.part }} | Set custom facts 1
  ansible.builtin.set_fact:
    _node_run_restore: "{{ not _node_data_chain_path_db_stat.stat.exists or
                           _node_data_chain_path_db_size.stdout == '0' }}"
    # we only use the tmp_restore_path directory if we really need it (when a service is run)
    _node_use_tmp_restore_path: "{{ ansible_facts.services[node_app_name+'.service'] is defined and
                                    ansible_facts.services[node_app_name+'.service'].state == 'running' and 
                                    node_chain_backup_tmp_restore_path != '' }}"
    #https://docs.ansible.com/ansible/latest/user_guide/complex_data_manipulation.html#find-mount-point
    # List can be empty if a mounted device doesn't start with `/` (exotic FS like docker overlay, bug https://github.com/ansible/ansible/issues/24644).
    # Be careful, if you use these FSs, the free space will not be checked.
    _node_run_check_size_mounts: "{{ ansible_mounts | selectattr('mount', 'in', _node_data_root_path) | list | sort(attribute='mount') }}"


- name: Restore {{ item.part }} | Set custom facts 2
  ansible.builtin.set_fact:
    # We don't need to calculate free space if we sync  a backup to an existing DB
    # Because we can't know the required amount of free space before syncing
    _node_run_check_size: "{{ not (_node_data_chain_path_db_stat.stat.exists and 
                              _node_data_chain_path_db_size.stdout != '0' and
                              not _node_use_tmp_restore_path) and 
                              _node_run_check_size_mounts | length > 0  }}"
    _node_backup_dl_path: "{{ node_chain_backup_tmp_restore_path if _node_use_tmp_restore_path 
                              else item.chain_path + '/' + item.db_folder }}"

- name: Run {{ item.part }} restoring
  block:

  # A previous run can be stopped unexpectedly.
  # We have to remove the temp directory to calculate the right amount of free space.
  - name: Restore {{ item.part }} | Delete temporary folder
    ansible.builtin.file:
      path: "{{ node_chain_backup_tmp_restore_path }}"
      state: absent
    when: _node_use_tmp_restore_path

  # It doesn't really matter what directory it is, temporary or not.
  # Anyway, we really need an existing directory to allow sync utilities to be run
  - name:  Restore {{ item.part }} | Make sure download path exists
    ansible.builtin.file:
      path: "{{ _node_backup_dl_path }}"
      state: directory
      owner: "{{ node_user }}"
      group: "{{ node_user }}"
      mode: '0755'

  - name: Restore {{ item.part }} | Check free space in '_node_data_root_path'
    ansible.builtin.set_fact:
      _node_restore_free_space: "{{ _node_run_check_size_mounts[-1]['size_available'] }}"
    when: _node_run_check_size

  - name: Restore {{ item.part }} | Print free space in '_node_data_root_path'
    ansible.builtin.debug:
      msg: Free space at destination = {{ _node_restore_free_space | filesizeformat(true) }}
    when: _node_run_check_size

  - name: Restore {{ item.part }} | Tar restoring
    ansible.builtin.include_tasks:
      file: 801-restore-chain-tar.yml
      apply:
        tags: [ 'node', 'node-restore-chain' ]
    when: item.restoring_type == 'tar'

  - name: Restore {{ item.part }} | GCP restoring
    ansible.builtin.include_tasks:
      file: 802-restore-chain-gcp.yml
      apply:
        tags: [ 'node', 'node-restore-chain' ]
    when:  item.restoring_type == 'gcp'

  - name: Restore {{ item.part }} | HTTP restoring
    ansible.builtin.include_tasks:
      file: 803-restore-chain-http.yml
      apply:
        tags: [ 'node', 'node-restore-chain' ]
    when:  item.restoring_type == 'http'

  - name: Restore {{ item.part }} | Check if data_root folder already exists
    ansible.builtin.stat:
      path: "{{ _node_data_root_path }}"
      get_checksum: false
    register: _node_data_root_path_stat
    when: ansible_check_mode

  - name: Restore {{ item.part }} | Recursively change ownership of the '_node_data_root_path' directory
    ansible.builtin.file:
      path: "{{ _node_data_root_path }}"
      state: directory
      recurse: yes
      owner: "{{ node_user }}"
      group: "{{ node_user }}"
    ignore_errors: "{{ ansible_check_mode and not _node_data_root_path_stat.stat.exists }}"

  when: _node_run_restore
