---
- name: Restore {{ item.part }} | Tar restoring | Delete temp download folder
  ansible.builtin.file:
    path: "{{ item.chain_path }}/tmp"
    state: absent
  changed_when: false
  ignore_errors: "{{ not _node_data_chain_path_stat.stat.exists }}"

- name: Restore {{ item.part }} | Tar restoring | Create temp download folder
  ansible.builtin.file:
    path: "{{ item.chain_path }}/tmp"
    state: directory
    owner: "{{ node_user }}"
    group: "{{ node_user }}"
    mode: "0755"
  changed_when: false
  ignore_errors: "{{ not _node_data_chain_path_stat.stat.exists }}"

- name: Restore {{ item.part }} | Tar restoring | Check if temp download folder already exists
  ansible.builtin.stat:
    path: "{{ item.chain_path }}/tmp"
    get_checksum: false
  register: _node_data_chain_tmp_path_stat

- name: Restore {{ item.part }} | Tar restoring | Download chain backup
  ansible.builtin.get_url:
    url: "{{ item.tar_url }}"
    dest: "{{ item.chain_path }}/db.tar"
    tmp_dest: "{{ item.chain_path }}/tmp"
    owner: "{{ node_user }}"
    group: "{{ node_user }}"
    mode: "0644"
    timeout: 900
  ignore_errors: "{{ not _node_data_chain_path_stat.stat.exists or not _node_data_chain_tmp_path_stat.stat.exists }}"

- name: Restore {{ item.part }} | Tar restoring | Check if backup file already exists
  ansible.builtin.stat:
    path: "{{ item.chain_path }}/db.tar"
    get_checksum: false
  register: _node_data_chain_backup_file_stat

- name: Restore {{ item.part }} | Tar restoring | Extract chain backup
  ansible.builtin.unarchive:
    copy: false
    src: "{{ item.chain_path }}/db.tar"
    dest: "{{ item.chain_path }}/{{ item.db_folder }}"
    owner: "{{ node_user }}"
    group: "{{ node_user }}"
  ignore_errors: "{{ not _node_data_chain_path_stat.stat.exists or not _node_data_chain_backup_file_stat.stat.exists }}"
  notify: restart service {{ node_handler_id }}

- name: Restore {{ item.part }} | Tar restoring | Delete backup archive
  ansible.builtin.file:
    path: "{{ item.chain_path }}/db.tar"
    state: absent
  ignore_errors: "{{ not _node_data_chain_path_stat.stat.exists }}"
