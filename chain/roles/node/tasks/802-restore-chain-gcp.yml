---

- block:

  - name: Restore {{ item.part }} | GCP restoring | Install packages
    ansible.builtin.package:
      name: gpg
      update_cache: yes

  - name: Restore {{ item.part }} | GCP restoring | Add Google cloud apt GPG key
    ansible.builtin.apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg

  - name: Restore {{ item.part }} | GCP restoring | Add cloud-sdk repo
    ansible.builtin.include_role:
      name: paritytech.common.secure_apt
    vars:
      secure_apt_key: B53DC80D13EDEF05
      secure_apt_repositories:
        - http://packages.cloud.google.com/apt cloud-sdk-{{ ansible_distribution_release }} main

  when: node_chain_backup_gcp_install_sdk | bool

- name: Restore {{ item.part }} | GCP restoring | Check last version
  ansible.builtin.command: gsutil cat {{ item.gcp_url }}/latest_version.meta.txt
  register: _node_last_backup_version
  check_mode: false
  changed_when: false
  when: item.custom_gcp_url == ''

- name: Restore {{ item.part }} | GCP restoring | Setup _node_chain_backup_gcp_full_path
  ansible.builtin.set_fact:
    _node_chain_backup_gcp_full_path: "{% if item.custom_gcp_url == '' %}
    {{ item.gcp_url }}/{{ _node_last_backup_version.stdout }}
    {% else %}{{ item.custom_gcp_url }}{% endif %}"

- name: Restore {{ item.part }} | GCP restoring | Check the size of the backup
  ansible.builtin.shell: gsutil du -s {{ _node_chain_backup_gcp_full_path | trim | quote }} | awk '{print $1}'
  check_mode: false
  changed_when: false
  register: _node_restore_backup_size
  when: _node_run_check_size

- name: Restore {{ item.part }} | GCP restoring | Print backup size
  ansible.builtin.debug:
    msg: Backup size = {{ _node_restore_backup_size.stdout | int | filesizeformat(true) }}
  when: _node_run_check_size

- name: Restore {{ item.part }} | GCP restoring | Fail if free space <500MB
  ansible.builtin.fail:
    msg: |
      Not enough free space to perform the restore, you should set the node_data_root_path variable
      to a path on a different drive with enough free space
  when:
    - _node_run_check_size
    - _node_restore_free_space | int - _node_restore_backup_size.stdout | int < 500 * 1024 * 1024
    # Skipped during check mode because it doesn't actually delete the db, making the result of this task wrong
    - not ansible_check_mode

- name: Restore {{ item.part }} | GCP restoring | Print backup path
  ansible.builtin.debug:
    msg: "{{ _node_chain_backup_gcp_full_path }}"

- name: Restore {{ item.part }} | GCP restoring | Stop service
  ansible.builtin.systemd:
    name: "{{ node_app_name }}"
    state: stopped
  notify: restart service {{ node_handler_id }}
  ignore_errors: "{{ not _node_systemd_unit_file_stat.stat.exists }}"
  when: not _node_use_tmp_restore_path

- name: Restore {{ item.part }} | GCP restoring | Download chain backup
  ansible.builtin.command: |
    gsutil -m -o 'GSUtil:parallel_process_count={{ ansible_processor_vcpus }}' -o 'GSUtil:parallel_thread_count=12'
    rsync -d -r {{ _node_chain_backup_gcp_full_path }} {{ _node_backup_dl_path | quote }}
  changed_when: true
  notify: restart service {{ node_handler_id }}

- name: Restore {{ item.part }} | GCP restoring | Manage node_chain_backup_tmp_restore_path
  block:

  - name: Restore {{ item.part }} | GCP restoring | Stop service and cleanup DB
    ansible.builtin.include_tasks: includes/_delete_db_folder.yml

  - name: Restore {{ item.part }} | GCP restoring | Copy backup from temporary folder
    ansible.builtin.copy:
      src: "{{ node_chain_backup_tmp_restore_path }}/"
      dest: "{{ item.chain_path }}/{{ item.db_folder }}"
      owner: "{{ node_user }}"
      group: "{{ node_user }}"
      remote_src: true

  - name: Restore {{ item.part }} | GCP restoring | Delete temporary folder
    ansible.builtin.file:
      path: "{{ node_chain_backup_tmp_restore_path }}"
      state: absent

  when: _node_use_tmp_restore_path
